class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def insert_preorder(self, root, value):
        if root is None:
            return TreeNode(value)

        # Preorder (Root -> Left -> Right)
        if root.left is None:
            root.left = TreeNode(value)
        elif root.right is None:
            root.right = TreeNode(value)
        else:
            self.insert_preorder(root.left, value)

        return root

    def postorder_traversal(self, root):
        if root is None:
            return
        self.postorder_traversal(root.left)
        self.postorder_traversal(root.right)
        print(root.value, end=" ")

# Create binary tree
tree = BinaryTree()
tree.root = TreeNode(2)
tree.root.left = TreeNode(3)
tree.root.right = TreeNode(4)
tree.root.left.left = TreeNode(5)

# Insert 6 using Preorder DFS
tree.insert_preorder(tree.root, 6)

# Display the tree using Postorder DFS
print("Postorder Traversal after Insertion:")
tree.postorder_traversal(tree.root)

'''   2
     / \
    3   4
   /
  5
'''
'''   2
     / \
    3   4
   / \
  5   6
'''
